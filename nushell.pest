// Primitives

hex_int = @{ "0x" ~ ASCII_HEX_DIGIT+ }
oct_int = @{ "0o" ~ ASCII_OCT_DIGIT+ }
bin_int = @{ "0b" ~ ASCII_BIN_DIGIT+ }
dec_int = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
int = { hex_int | oct_int | bin_int | dec_int }

float = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ "."
    ~ ASCII_DIGIT*
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string = { double_quote_string | single_quote_string | backtick_string | interpolation_string }
double_quote_string = ${ "\"" ~ double_quote_string_inner ~ "\"" }
double_quote_string_inner = @{ double_quote_string_char* }
double_quote_string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "a" | "b" | "e" | "f" | "n" | "r" | "t" | "(" | ")" | "{" | "}" | "[" | "]" | "$" | "^" | "#" | "|" | "~")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

filesize = @{ dec_int ~ (^"b" | ^"kb" | ^"kib" | ^"mb" | ^"mib" | ^"gb" | ^"gib" | ^"tb" | ^"tib" | ^"pb" | ^"pib" | ^"eb" | ^"eib" | ^"zb" | ^"zib") }
duration = @{ dec_int ~ (^"ns" | ^"us" | ^"ms" | ^"sec" | ^"min" | ^"hr" | ^"day" | ^"wk" | ^"month" | ^"yr" | ^"dec")}

unit = { filesize | duration }

binary_data = { binary_data_hex | binary_data_oct | binary_data_bin }
binary_data_hex = @{ "0x[" ~ ASCII_HEX_DIGIT+ ~ "]" }
binary_data_oct = @{ "0o[" ~ ASCII_OCT_DIGIT+ ~ "]" }
binary_data_bin = @{ "0b[" ~ ASCII_BIN_DIGIT+ ~ "]" }

interpolation_string = ${ "$\"" ~ double_quote_string_inner ~ "\"" }

single_quote_string = ${ "'" ~ single_quote_string_inner ~ "'" }
single_quote_string_inner = @{ single_quote_string_char* }
single_quote_string_char = {
    !("'") ~ ANY
}

backtick_string = ${ "`" ~ backtick_string_inner ~ "`" }
backtick_string_inner = @{ backtick_string_char* }
backtick_string_char = {
    !("`") ~ ANY
}

// Compound values

array = {
    "[" ~ "]" |
    "[" ~ nl* ~ bare_value ~ (nl* ~ ","? ~ nl* ~ bare_value)* ~ nl* ~ "]"
}

table = {
    ("["~ nl* ~ array ~ nl* ~ ";" ~ (array | nl)+ ~ "]") |
    ("[" ~ record ~ ( "," ~ record )* ~ "]")
}
record = {
    "{" ~ "}" |
    "{" ~ pair ~ ("," ~ pair)* ~ "}"
}
pair = { label ~ ":" ~ value }
label = { string | ident }

ident_char = {!(" " | "\t" | "|" | "$" | "{" | "}" | "(" | ")" | "[" | "]" | "\r" | "\n" | "." | ":") ~ ANY}
ident = @{ ident_char+ }

range_value = _{ int | float | variable | paren_expr }
lower_value = { range_value }
upper_value = { range_value }
range = { lower_value? ~ ".." ~ upper_value? }

// Bare word forms

bare_char = _{!(" " | "\t" | "|" | "$" | "{" | "}" | "(" | ")" | "\r" | "\n") ~ ANY}
bare_string = @{ bare_char+ }
bare_word = @{ (ASCII_ALPHANUMERIC | "-" | "." | "_")+ }
bare_value = { value | bare_word }


// Variables

variable_char = {!(" " | "\t" | "|" | "$" | "{" | "}" | "(" | ")" | "[" | "]" | "\r" | "\n" | "." | ":" | "+" | "-" | "/" | "*") ~ ANY}
variable_name = @{ variable_char+ }
variable = { "$" ~ variable_name }


// Math expression

or = { "or" | "||" }
and = { "and" | "&&" }
bitor = { "bit-or" }
bitxor = { "bit-xor" }
bitand = { "bit-and" }
comp = { "!~" | "=~" | "starts-with" | "ends-with" | "<" | "<=" | ">" | ">=" | "==" | "!-" | "in" | "not-in" }
shift = { "bit-shl" | "bit-shr" }
plus = { "+" | "-" }
mul = { "*" | "/" | "mod" | "//" }
pow = { "**" }

operation = _{ or | and | bitor | bitxor | bitand | comp | shift | plus | mul | pow }
expr = { value ~ ( operation ~ value )* }


// Row conditions

row_condition = _{ (value | ident) ~ ( operation ~ value )* }


// Expression values

paren_expr = _{ "(" ~ nl* ~ pipeline ~ nl* ~ ")" }
pathed_value = _{ (record | table | array | variable | closure | block | paren_expr | traditional_call) ~ (("." ~ ident) | ("[" ~ expr ~ "]"))* }

value = _{ binary_data | range | unit | float | int | string | pathed_value | "true" | "false" | "null" }


// Code blocks

out_type_block = { "->" ~ ident ~ ";" }
block = { "{" ~ out_type_block? ~ nl? ~ toplevel* ~ nl? ~ "}" }

closure_args = { "|" ~ param* ~ "|"}
closure = { "{" ~ closure_args ~ out_type_block? ~ ("\r" | "\n")? ~ toplevel* ~ "}" }

param = { ident ~ (":" ~ ident)? ~ ("=" ~ value)? }
params = { ("(" ~ param* ~ ")") | ("[" ~ param* ~ "]") }


// Reserved word builtins

out_type_def = { "->" ~ ident }
untyped_block = { "{" ~ nl? ~ toplevel* ~ nl? ~ "}" }

where_command = { "where" ~ row_condition }
def_command = { "def" ~ ident ~ params ~ out_type_def? ~ untyped_block }
def_env_command = { "def-env" ~ ident ~ params ~ out_type_def? ~ untyped_block }
if_command = { "if" ~ expr ~ untyped_block ~ ("else" ~ if_command)* ~ ("else" ~ untyped_block)? }
for_command = { "for" ~ ident ~ "in" ~ ( range | array | ident ) ~ untyped_block }
while_command = { "while" ~ expr ~ untyped_block }
let_command = { "let" ~ ident ~ "=" ~ pipeline }

// Commands

long_flag = @{ "--" ~ ASCII_ALPHANUMERIC+ ~ ("=" ~ value)? }
short_flag = @{ "-" ~ ASCII_ALPHANUMERIC+ }
flag = { short_flag | long_flag }

user_command = { ident ~ (flag | value | bare_string )* }

break_command = { "break" }
continue_command = { "continue" }
return_command = { "return" ~ expr? }
commands = _{ if_command | for_command | while_command | where_command | break_command | continue_command | return_command | expr | user_command }
command = { !("def" | "def-env") ~ commands }

unnamed_arg = !{ value }
named_arg = !{ label ~ ":" ~ value }
traditional_call_arg = !{ named_arg | unnamed_arg }
arg_list = !{ traditional_call_arg ~ ("," ~ traditional_call_arg)* }
traditional_call = ${ (ident ~ "(" ~ arg_list? ~ ")") }

// Pipeline

pipeline = { command ~ ((!"||" ~ nl? ~ "|") ~ command)* }


// Program

toplevel = _{ nl* ~ (def_command | def_env_command | let_command | pipeline) ~ nl* }
program = _{ SOI ~ toplevel* ~ EOI }


// Trivia

WHITESPACE = _{ " " | "\t"  }
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* ~ "\n" }
nl = _{ "\r" | "\n" }
